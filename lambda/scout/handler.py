"""Scout Agent Lambda handler - Analyzes requirements and researches patterns."""

import os
import json
import logging
from typing import Dict, Any

# Import shared libraries (will be available via Lambda Layer)
import sys
sys.path.insert(0, '/opt/python')

from state_manager import StateManager
from s3_manager import S3Manager
from bedrock_client import BedrockClient

logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Initialize clients
state_manager = StateManager(os.environ['BUILD_STATE_TABLE'])
s3_manager = S3Manager(
    os.environ['ARTIFACTS_BUCKET'],
    os.environ['LOGS_BUCKET']
)
bedrock_client = BedrockClient(os.environ['AWS_REGION'])


def lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    """
    Scout agent: Analyzes task requirements and researches best practices.

    Expected input (from Bedrock Agent):
    {
        "task": "Build description",
        "build_id": "uuid",
        "mode": "new_project"
    }

    Returns:
    {
        "requirements": [...],
        "tech_stack": {...},
        "risks": [...],
        "timeline_estimate": "X hours"
    }
    """
    try:
        logger.info(f'Scout agent invoked with event: {json.dumps(event)}')

        # Extract parameters from Bedrock Agent event
        if 'inputText' in event:
            # Parse input from Bedrock Agent
            input_data = json.loads(event['inputText'])
        else:
            # Direct invocation (for testing)
            input_data = event

        build_id = input_data.get('build_id')
        task = input_data.get('task')
        mode = input_data.get('mode', 'new_project')

        if not build_id or not task:
            raise ValueError('build_id and task are required')

        logger.info(f'Analyzing requirements for build {build_id}')

        # Update build status
        state_manager.update_status(build_id, 'scouting')

        # Analyze requirements using Bedrock
        analysis = bedrock_client.analyze_requirements(task)

        logger.info(f'Requirements analysis complete: {len(analysis.get("requirements", []))} requirements identified')

        # Generate scout report
        scout_output = {
            'requirements': analysis.get('requirements', []),
            'tech_stack': analysis.get('tech_stack', {}),
            'risks': analysis.get('risks', []),
            'timeline_estimate': analysis.get('timeline_estimate', 'unknown'),
            'mode': mode,
        }

        # Save to DynamoDB
        state_manager.save_agent_output(build_id, 'scout', scout_output)

        # Save detailed report to S3
        report = generate_scout_report(task, scout_output)
        s3_manager.upload_log(build_id, 'scout-report', report)

        logger.info(f'Scout analysis saved for build {build_id}')

        return {
            'statusCode': 200,
            'body': json.dumps(scout_output)
        }

    except Exception as e:
        logger.error(f'Scout agent error: {str(e)}', exc_info=True)
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }


def generate_scout_report(task: str, analysis: Dict[str, Any]) -> str:
    """Generate detailed scout report in markdown format."""
    report = f"""# Scout Report

## Task
{task}

## Requirements
{chr(10).join(f'- {req}' for req in analysis.get('requirements', []))}

## Recommended Technology Stack
{json.dumps(analysis.get('tech_stack', {}), indent=2)}

## Identified Risks
{chr(10).join(f'- {risk}' for risk in analysis.get('risks', []))}

## Timeline Estimate
{analysis.get('timeline_estimate', 'unknown')}

## Mode
{analysis.get('mode', 'new_project')}

---
Generated by Bedrock Agentic Builder - Scout Agent
"""
    return report
